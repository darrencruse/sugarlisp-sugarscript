// Generated by SugarLisp v0.5
console.log(["Hello1", " World1"].join(''));

var squarefn = function(n) {
  return (n * n);
};
console.log(squarefn(10));

function myadd(x, y) {
  return (x + y);
}
var squarrow1 = function(n) {
  return (n * n);
};
console.log(squarrow1(10));

var squarrow2 = function(n) {
  return (n * n);
};
console.log(squarrow2(10));

(function() {
  try {
    return (function() {
      console.log("In try");
      return (function() {
        throw "In catch";
      })();
    })();

  } catch (e) {
    return (function(err) {
      return (function() {
        console.log(err);
      })();
    })(e);
  }
})();
((typeof(window) === "undefined") ?
  (function() {
    console.log("Not Running on browser");
  })() :
  (function() {
    console.log("Running on browser");
  })());
((1 != 2) ?
  (function() {
    console.log("Nos are not equal");
  })() : undefined);

((Object.prototype.toString.call(console) === "[object Object]") ?
  (function() {
    console.log("console is an object");
  })() :
  (function() {
    console.log("console is not an object");
  })());
var ten = 10;
console.log(((ten > 0) ?
  "ten is positive" :
  "ten is negative"));
var arr = [
  1,
  2,
  3,
  4,
  5
];
console.log(arr[2]);
console.log("first is:", arr[0]);
console.log("rest is:", arr.slice(1, arr.length));
var mtarr2 = [];
console.log("empty array is empty:", (0 === mtarr2.length));

((Object.prototype.toString.call(console) === "[object Array]") ?
  (function() {
    console.log("console is an array");
  })() :
  (function() {
    console.log("console is not an array");
  })());
console.log((10 * 10));
var i = 2;
console.log((++i * ++i));

(function(name, email, tel) {
  console.log(name);
  console.log(email);
})("John", "john@example.com", "555-555-5556");

(function(name, email, tel) {
  console.log(name);
  console.log(email);
})("John", "john@example.com", "555-555-5556");
(function() {
  console.log("testing do");
  console.log("test again");
})();
var re = /[a-zA-Z0-9]/
var fn = function(x, y) {
  return (x / y);
};
var obj = {
  first: "fred",
  last: "flintstone",
  friends: [
    "barney",
    "betty"
  ],
  toString: function() {
    return ((this.first + " ") + this.last);
  }
};
console.log(obj.toString());
console.log('hello from js string');
var name = "fred";
var greeting = ['hello ', name].join('');
console.log(greeting);
var objAt = {
  first: "fred",
  last: "flintstone",
  toString: function() {
    return [this.first, " ", this.last].join('');
  },
  dump: function() {
    console.log(this.toString());
  }
};
objAt.dump();
console.log("fred flintstone contains 'flint':", /flint/.test("fred flintstone"))
console.log("fred flintstone contains 'flint':", /flint/.test("fred flintstone"))
console.log((10 / 5));
(/[^\.]+\.[^\.]+/.test("filename.ext") ?
  console.log("regex correctly says 'filename.ext' has an extension") :
  console.log("regex incorrectly says 'filename.ext' has no extension"))
var start1 = new Date();
console.log(start1);

var start2 = new Date();
console.log(start2);

var start3 = new Date("October 13, 1975 11:13:00");
console.log(start3);
var dayNum = start2.getDay();
var dayName = ((dayNum === 0) ?
  "sun" :
  ((dayNum === 1) ?
    "mon" :
    ((dayNum === 2) ?
      "tues" :
      ((dayNum === 3) ?
        "wed" :
        ((dayNum === 4) ?
          "thu" :
          ((dayNum === 5) ?
            "fri" :
            ((dayNum === 6) ?
              "sat" : undefined)))))));
console.log(["today is ", dayName].join(''));
console.log('a while loop 3 down to 1...');
var wy = 3;
while ((wy !== 0)) {
  (function() {
    console.log(wy);
    return wy--;
  })()
};
console.log('and loop 4 times...');
for (var x = 0; x < 4; x++) {
  (function() {
    console.log(x);
  })()
};
console.log('each of [1,2,3]...');
[
  1,
  2,
  3
].forEach(function(elem, i, list) {
  console.log(elem);
});
console.log('same but using forEach...');
[
  1,
  2,
  3
].forEach(function(el) {
  console.log(el);
});
console.log('arrow functions bind the outer "this":');

function Ubertest(x) {
  this.x = x;

  function Test(x) {
    this.x = x;

    var arr = [
      1,
      2,
      3
    ];
    return arr.forEach(function(el) {
      console.log(this.x, el);
    }.bind(this));
  }

  var arr = [
    'a',
    'b',
    'c'
  ];
  return arr.forEach(function(el) {
    return new Test([this.x, " ", el].join(''));
  }.bind(this));
}

new Ubertest("Uber");