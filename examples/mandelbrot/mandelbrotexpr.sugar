// Lispyscript port of Hot Cocoa Lisp Mandelbrot example found here:
// https://github.com/olleicua/hcl-canvas-mandelbrot/blob/master/mandelbrot.hcl
//#transpile { to: 'core' }
var canvas = first(document.getElementsByTagName("canvas"));
var ctx = canvas.getContext("2d");

canvas.height = window.innerHeight;
canvas.width = window.innerWidth;

var square = (x) => x * x;
//macro square (x) { ~x * ~x }

function mandelbrot (r, i, maxIter) {
  var iter = 0;
  var zr = r;
  var zi = i; // z = c
  var zr_sq = square(r);
  var zi_sq = square(i); // zi_sq and zr_sq
  var loop = 1; // max orbit size to check for
  var lr = 0;
  var li = 0; // orbit checker

  // note the parens here around the while condition
  while (!((iter === maxIter) || ((lr === zr) && (li === zi)) || (4 <= (zr_sq + zi_sq)))) {
    ++iter
    if(loop === iter) {
      lr = zr;
      li = zi;
      loop += loop;  // grow loop
    }
    zr_sq = square(zr);
    zi_sq = square(zi); // zi_sq and zr_sq
    zi *= zr;
    zi += zi;
    zi += i; // zi = 2*zi*zr + ci
    zr = (zr_sq - zi_sq);
    zr += r; // zr = zr_sq - zi_sq + cr
 }

 if? ((iter === maxIter) || ((lr === zr) && (li === zi))) null else iter
}

function color (n) {
  if? (nil? n)
    "rgb(0,0,0)"
  else do {
      n = (32 * n) % 768;
      var rgb = cond {
        (n < 256) [(255 - n), n, 0]
        (n < 512) [0, (511 - n), (n - 256)]
        true      [(n - 512), 0, (767 - n)]
      }
      "rgb(${rgb[0]},${rgb[1]},${rgb[2]})"
  }
}

var params = { r: 0, i: 0, range: 4, maxIter: 30 };

var half = (x) => x / 2;

function draw() {
  dotimes(r, canvas.width)
    dotimes(i, canvas.height) {
      var calc = mandelbrot(
          (((params.range * r) / canvas.width) +
            half(-params.range) + params.r),
          (((params.range * i) / canvas.height) +
            half(-params.range) + params.i),
          params.maxIter);
      ctx.fillStyle = color(calc);
      ctx.fillRect(r, i, 1, 1);
    }
}

draw();

// note the lack of parens around the "e.keyCode" for the switch 
document.addEventListener("keyup", (e) => case (e.keyCode) {
    // q
    81 do {
      params.range *= (2 / 3);
      ++params.maxIter;
      draw();
    }
    // w
    87 do {
      params.i -= (params.range / 3);
      draw();
    }
    // e
    69 do {
      params.range *= (3 / 2);
      --params.maxIter;
      draw();
    }
    // a
    65 do {
      params.r -= (params.range / 3);
      draw();
    }
    // s
    83 do {
      params.i += (params.range / 3);
      draw();
    }
    // d
    68 do {
      params.r += (params.range / 3);
      draw();
    }
});
